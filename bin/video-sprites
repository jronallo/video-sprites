#!/usr/bin/env ruby

require 'slop'
require 'fileutils'
require 'pry'

def remove_files(output_directory, verbose)
  deadfiles = Dir.glob(File.join(output_directory, '**', '*.jpg'))
  puts "list of dead files will be #{deadfiles}" if verbose
  deadfiles.each do | deadfile |
    puts "removing file #{deadfile}" if verbose
    File.unlink(deadfile)
  end
end


opts = Slop.new strict: true do
  banner 'Usage: video-sprites [options]'

  on 'f', 'frames=', 'An optional password', argument: :optional, as: Integer, default: 5
  on 'w', 'width=', 'Width of each thumbnail', argument: :optional, as: Integer, default: 200
  on 'c', 'columns=', 'Number of columns in the image sprite', argument: :optional, as: Integer, default: 5
  on 'k', 'keep', 'Keep all the individual images and other intermediate artifacts.', argument: :optional
  on 'i', 'input=', 'Input file or directory', required: true
  on 'o', 'output=', 'Output file or directory', argument: :optional
  on 'v', 'verbose', 'Enable verbose mode'
  on 'z', 'clean', 'Clean up the output directory'
  on 'h', 'help', 'Help!!!'
end

def timestamp(total_seconds)
  seconds = total_seconds % 60
  minutes = (total_seconds / 60) % 60
  hours = total_seconds / (60 * 60)

  format("%02d:%02d:%02d.000", hours, minutes, seconds)
end


begin
  opts.parse
rescue Slop::Error => e
  puts e.message
  puts opts # print help
end

verbose = opts[:verbose]
input   = File.expand_path(opts[:input])
output  = opts[:output]
frames  = opts[:frames]
columns = opts[:columns]
width   = opts[:width]
clean   = opts[:clean]

unless File.exist?(input)
  puts 'File or directory does not exist!'
  exit
end

if verbose
  puts "Input file: #{input}"
end

if File.directory?(input)
  files = Dir.glob(File.join(input, '*'))
else
  files = [input]
end


if output
  output_directory = File.expand_path(output)
  puts "output dir is #{output_directory}" if verbose
  if File.directory?(output_directory)
    remove_files(output_directory, verbose) if clean
  else
    raise "Output directory must be a directory, was: #{output}"
  end
else
  output_directory = input
  if File.directory?(output_directory)
    puts "output dir is #{output_directory}" if verbose
    remove_files(output_directory, verbose) if clean
  else
    output_directory = File.dirname(input)
    puts "output dir is #{output_directory}" if verbose
    remove_files(output_directory, verbose) if clean
  end
end

files.each do | file |
  puts "Processing file: #{file}" if verbose
  extension = File.extname(file)
  basename =  File.basename(file, extension)
  puts "Basename is: #{basename}" if verbose

  output_path = File.join(output_directory, basename)

  if File.directory?(input)
    FileUtils.mkdir_p(output_path)
    output_file_path = File.join(output_directory, basename, basename)
  else
    output_file_path = File.join(output_directory, basename)
  end

  puts "#{output_file_path} output file path"
  # FIXME: check if the files exist already and maybe don't process anything

  ffprobe_cmd = 'ffprobe -i "' + "#{file}" +  '" 2>&1 | sed -n "s/.*, \(.*\) fp.*/\1/p"'
  puts ffprobe_cmd if verbose
  frames_per_sec=`#{ffprobe_cmd}`.to_f.ceil.to_i
  frames_value=frames_per_sec*frames
  puts "frames_per_sec #{frames_per_sec}, frames_value #{frames_value}" if verbose

  ffmpeg_cmd = %Q|ffmpeg -i "#{file}" -vf select='lt(mod(n\\,#{frames_value})\\,1),fps=1/#{frames}' "#{output_file_path}-%05d.jpg"|
  puts ffmpeg_cmd if verbose
  `#{ffmpeg_cmd}`

  jpegs = Dir.glob(output_file_path + '*.jpg').sort
  FileUtils.rm(jpegs.first)

  montage_cmd = %Q|montage "#{output_file_path}*jpg" -tile #{columns}x -geometry #{width}x "#{output_file_path}-sprite.jpg"|
  puts montage_cmd if verbose

  `#{montage_cmd}`

  # Create WebVTT file

  if verbose
    puts 'Processing a WebVTT file from these images:'
    puts jpegs
  end
  # place all the cues into an array of hashes like this:
  # {start: 0, end: 5, x: 0, y: 0, w: 200, h: 150}
  cues = []

  start = 0
  first_jpeg = jpegs.first
  height = `identify -format "%h" -ping #{first_jpeg}`.to_i
  jpegs.each_with_index do |image, index|
    puts "Index: #{index}" if verbose
    cue = {}

    cue[:start] = start
    cue[:end] = start + opts[:frames]

    cue[:x] = ((index % opts[:columns]) * opts[:width])
    puts "x #{cue[:x]}" if verbose

    cue[:y] = (index.to_f / opts[:columns].to_f).floor * height
    puts "y #{cue[:y]}" if verbose

    cue[:w] = opts[:width]
    cue[:h] = height

    start += opts[:frames]
    puts if verbose

    cues << cue
  end

  puts cues if verbose

  # media fragment order: x,y,w,h
  webvtt_file_name = output_file_path + '.vtt'
  puts "Creating WebVTT: #{webvtt_file_name}" if verbose
  File.open(webvtt_file_name, 'w') do |fh|
    fh.puts "WEBVTT\n\n"

    cues.each do |cue|
      puts cue if verbose
      start_timestamp = timestamp(cue[:start])
      end_timestamp = timestamp(cue[:end])
      fh.print start_timestamp
      fh.print ' --> '
      fh.puts end_timestamp

      url = File.join("http://example.com", basename + "sprite.jpg#xywh=#{cue[:x]},#{cue[:y]},#{cue[:w]},#{cue[:h]}")

      fh.puts url
      fh.puts
    end

  end

end
